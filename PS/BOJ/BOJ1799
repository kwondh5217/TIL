import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class BOJ1799 {

    static int n;
    static int[] max;
    static int[][] map;
    static int[] dx = {-1, -1, 1, 1};
    static int[] dy = {-1, 1, -1, 1};
    static List<Point> blacks = new ArrayList<>();
    static List<Point> whites = new ArrayList<>();

    static class Point {
        int x, y;
        public Point(int x,int y){
            this.x = x;
            this.y = y;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        n = Integer.parseInt(br.readLine());
        map = new int[n][n];
        max = new int[2];
        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; j++) {
                int num = Integer.parseInt(st.nextToken());
                if(num == 1) {
                    if((i+j) % 2 == 0){
                        blacks.add(new Point(i,j));
                    }else {
                        whites.add(new Point(i,j));
                    }
                    map[i][j] = 0;
                }else {
                    map[i][j] = -1;
                }
            }
        }
        recur(blacks, 0, 0,  0);
        recur(whites, 0, 0,  1);
        System.out.println(max[0]+max[1]);
    }

    static void recur(List<Point> list,int index, int cnt, int color){
        if(index == list.size()){
            max[color] = Math.max(max[color], cnt);
            return;
        }

        if((list.size() - index) + cnt < max[color]){
            return;
        }

        Point point = list.get(index);
        int x = point.x;
        int y = point.y;

        if(isPossible(x, y)){
            map[x][y] = 1;
            recur(list, index + 1, cnt + 1, color);
            map[x][y] = 0;
        }
        recur(list, index + 1, cnt, color);
    }
    private static boolean isPossible(int x, int y){
        for(int i = 0; i < 4; i++){
            int nx = x;
            int ny = y;
            while(isRange(nx, ny)){
                if(map[nx][ny] > 0){
                    return false;
                }
                nx += dx[i];
                ny += dy[i];
            }
        }
        return true;
    }
    private static boolean isRange(int x, int y){
        if(x < 0 || y < 0 || x >= n || y >= n){
            return false;
        }
        return true;
    }
}
